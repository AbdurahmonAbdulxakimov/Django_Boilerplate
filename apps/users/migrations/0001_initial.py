# Generated by Django 4.2.2 on 2023-07-10 11:20

import apps.users.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import django_resized.forms
import phonenumber_field.modelfields


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False,
                                                     help_text='Designates that this user has all permissions without explicitly assigning them.',
                                                     verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False,
                                                 help_text='Designates whether the user can log into this admin site.',
                                                 verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True,
                                                  help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',
                                                  verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('full_name', models.CharField(max_length=256, verbose_name='full name')),
                ('phone_number',
                 phonenumber_field.modelfields.PhoneNumberField(error_messages={'error': 'Bunday raqam mavjud.'},
                                                                max_length=128, null=True, region=None, unique=True,
                                                                verbose_name='phone number')),
                ('email', models.EmailField(error_messages={'error': 'Bunday email mavjud.'}, max_length=254, null=True,
                                            unique=True, verbose_name='email')),
                ('bio', models.TextField(blank=True, verbose_name='bio')),
                ('avatar',
                 django_resized.forms.ResizedImageField(crop=['middle', 'center'], force_format='WEBP', keep_meta=True,
                                                        null=True, quality=90, scale=None, size=[500, 500],
                                                        upload_to='author/%Y/%m', verbose_name='avatar')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('notif_on_off', models.BooleanField(default=True, verbose_name='Notification On Off')),
                ('groups', models.ManyToManyField(blank=True,
                                                  help_text='The groups this user belongs to. AuthorRecommendList user will get all permissions granted to each of their groups.',
                                                  related_name='user_set', related_query_name='user', to='auth.group',
                                                  verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.',
                                                            related_name='user_set', related_query_name='user',
                                                            to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', apps.users.models.UserManager()),
            ],
        ),
    ]
